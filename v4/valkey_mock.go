// Code generated by MockGen. DO NOT EDIT.
// Source: v4/valkey.go
//
// Generated by this command:
//
//	mockgen -source=v4/valkey.go -destination=v4/valkey_mock.go -package=valkey
//

// Package valkey is a generated GoMock package.
package valkey

import (
	context "context"
	reflect "reflect"
	time "time"

	valkeycompat "github.com/valkey-io/valkey-go/valkeycompat"
	gomock "go.uber.org/mock/gomock"
)

// MockValkeyClientInterface is a mock of ValkeyClientInterface interface.
type MockValkeyClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValkeyClientInterfaceMockRecorder
	isgomock struct{}
}

// MockValkeyClientInterfaceMockRecorder is the mock recorder for MockValkeyClientInterface.
type MockValkeyClientInterfaceMockRecorder struct {
	mock *MockValkeyClientInterface
}

// NewMockValkeyClientInterface creates a new mock instance.
func NewMockValkeyClientInterface(ctrl *gomock.Controller) *MockValkeyClientInterface {
	mock := &MockValkeyClientInterface{ctrl: ctrl}
	mock.recorder = &MockValkeyClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValkeyClientInterface) EXPECT() *MockValkeyClientInterfaceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockValkeyClientInterface) Del(ctx context.Context, keys ...string) *valkeycompat.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*valkeycompat.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockValkeyClientInterfaceMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockValkeyClientInterface)(nil).Del), varargs...)
}

// Expire mocks base method.
func (m *MockValkeyClientInterface) Expire(ctx context.Context, key string, expiration time.Duration) *valkeycompat.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, expiration)
	ret0, _ := ret[0].(*valkeycompat.BoolCmd)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockValkeyClientInterfaceMockRecorder) Expire(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockValkeyClientInterface)(nil).Expire), ctx, key, expiration)
}

// FlushAll mocks base method.
func (m *MockValkeyClientInterface) FlushAll(ctx context.Context) *valkeycompat.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(*valkeycompat.StatusCmd)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockValkeyClientInterfaceMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockValkeyClientInterface)(nil).FlushAll), ctx)
}

// Get mocks base method.
func (m *MockValkeyClientInterface) Get(ctx context.Context, key string) *valkeycompat.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*valkeycompat.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockValkeyClientInterfaceMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValkeyClientInterface)(nil).Get), ctx, key)
}

// SAdd mocks base method.
func (m *MockValkeyClientInterface) SAdd(ctx context.Context, key string, members ...any) *valkeycompat.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(*valkeycompat.IntCmd)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockValkeyClientInterfaceMockRecorder) SAdd(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockValkeyClientInterface)(nil).SAdd), varargs...)
}

// SMembers mocks base method.
func (m *MockValkeyClientInterface) SMembers(ctx context.Context, key string) *valkeycompat.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", ctx, key)
	ret0, _ := ret[0].(*valkeycompat.StringSliceCmd)
	return ret0
}

// SMembers indicates an expected call of SMembers.
func (mr *MockValkeyClientInterfaceMockRecorder) SMembers(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockValkeyClientInterface)(nil).SMembers), ctx, key)
}

// Set mocks base method.
func (m *MockValkeyClientInterface) Set(ctx context.Context, key string, values any, expiration time.Duration) *valkeycompat.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, values, expiration)
	ret0, _ := ret[0].(*valkeycompat.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockValkeyClientInterfaceMockRecorder) Set(ctx, key, values, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockValkeyClientInterface)(nil).Set), ctx, key, values, expiration)
}

// TTL mocks base method.
func (m *MockValkeyClientInterface) TTL(ctx context.Context, key string) *valkeycompat.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(*valkeycompat.DurationCmd)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockValkeyClientInterfaceMockRecorder) TTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockValkeyClientInterface)(nil).TTL), ctx, key)
}
